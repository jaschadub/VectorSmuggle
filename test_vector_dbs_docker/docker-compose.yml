# Docker Compose file for running multiple vector databases for local testing
#
# Services included:
# - Qdrant: Vector database & search engine (ports: 6334 REST, 6335 gRPC)
# - ChromaDB: Open-source embedding database (port: 8000)
# - Weaviate: Open-source vector database (ports: 8080 REST, 50051 gRPC)
# - Milvus: Vector database with etcd/MinIO deps (ports: 19530 gRPC, 9091 REST)
# - pgvector: PostgreSQL with vector extension (port: 5432)
# - Faiss: Similarity search via unofficial API server (port: 5000)
#
# Usage:
#   docker compose up -d        # Start all services
#   docker compose down         # Stop all services
#   docker compose logs <svc>   # View service logs
#   docker compose ps           # Check service status
#
# Security Note: This configuration uses default credentials for testing only.
# Change passwords and restrict network access for production use.

# Note: version field is deprecated in Compose Specification

networks:
  vector-db-network:
    driver: bridge

volumes:
  qdrant_data: {}
  chroma_data: {}
  weaviate_data: {}
  milvus_etcd: {}
  milvus_minio: {}
  milvus_data: {}
  postgres_data: {}

services:
  # Qdrant: A vector database & search engine.
  # API Endpoint: http://localhost:6334
  qdrant:
    image: qdrant/qdrant:v1.9.1
    container_name: local-qdrant
    ports:
      - "6334:6333" # REST API
      - "6335:6334" # gRPC
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - vector-db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ChromaDB: An open-source embedding database.
  # API Endpoint: http://localhost:8000
  chroma:
    image: chromadb/chroma:0.5.0
    container_name: local-chroma
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/chroma/auth.txt
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic_authn.BasicAuthenticationServerProvider
    networks:
      - vector-db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Weaviate: An open-source vector database.
  # API Endpoint: http://localhost:8080
  weaviate:
    image: semitechnologies/weaviate:1.25.1
    container_name: local-weaviate
    ports:
      - "8080:8080" # REST
      - "50051:50051" # gRPC
    volumes:
      - weaviate_data:/var/lib/weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none' # No default vectorizer
      ENABLE_MODULES: ''
      CLUSTER_HOSTNAME: 'node1'
      LOG_LEVEL: 'info'
    networks:
      - vector-db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Faiss: A library for efficient similarity search.
  # Note: Faiss is a library, not a standalone server. This service uses an
  # unofficial image that wraps Faiss in a simple Flask API.
  # API Endpoint: http://localhost:5000
  faiss:
    image: hkunalic/faiss-search-server:latest
    container_name: local-faiss-server
    ports:
      - "5000:5000"
    networks:
      - vector-db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # pgvector: Open-source vector similarity search for PostgreSQL.
  # Connection: postgresql://postgres:mypassword@localhost:5432/vectordb
  postgres:
    image: ankane/pgvector:v0.7.2
    container_name: local-pgvector
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: vectordb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypassword
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    networks:
      - vector-db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vectordb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # --- Milvus Standalone Cluster ---
  # Milvus requires etcd and MinIO as dependencies.
  # API Endpoint: http://localhost:19530 (gRPC) or http://localhost:9091 (REST)

  etcd:
    image: quay.io/coreos/etcd:v3.5.14
    container_name: local-milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - milvus_etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - vector-db-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2024-05-29T21-35-15Z
    container_name: local-milvus-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9001:9001" # Console
      - "9000:9000" # API
    volumes:
      - milvus_minio:/data
    command: minio server /data --console-address ":9001"
    networks:
      - vector-db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  milvus:
    image: milvusdb/milvus:v2.4.4-standalone
    container_name: local-milvus-standalone
    ports:
      - "19530:19530" # gRPC
      - "9091:9091" # REST
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - milvus_data:/var/lib/milvus
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    networks:
      - vector-db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/health"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 90s
    restart: unless-stopped
